buildscript {
  repositories {
    maven { url = "https://files.minecraftforge.net/maven" }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = "knightminer"
archivesBaseName = "SimpleAbsorption"

// External properties
ext.configFile = file "build.properties"
configFile.withReader {
  // Load config.  It shall from now be referenced as simply config or project.config
  def prop = new Properties()
  prop.load(it)
  project.ext.config = new ConfigSlurper().parse prop
}
configurations {
    deployerJars
}

version = "${config.minecraft_version}-${config.mod_version}"

sourceSets {
  main {
    resources {
      srcDirs = [
        "$rootDir/src/main/resources",
        "$rootDir/src/generated/resources"
      ]
    }
  }
}

minecraft {
  mappings channel: 'snapshot', version: config.mappings_version
  //accessTransformer project.file("src/main/resources/META-INF/accesstransformer.cfg")
  runs {
    client {
      workingDirectory project.file('run')
      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'
      mods {
        simple_absorption {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'
      mods {
        simple_absorption {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'
      args '--mod', 'simple_absorption', '--all', '--output', file('src/generated/resources/')
      mods {
        simple_absorption {
           source sourceSets.main
        }
      }
    }
  }
}

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

repositories {
  // JEI
  maven {
    name 'DVS1 Maven FS'
    url 'http://dvs1.progwml6.com/files/maven'
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"
    
  // compile against the JEI API but do not include it at runtime
  compileOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}:api")
  // at runtime, use the full JEI jar
  runtimeOnly fg.deobf("mezz.jei:jei-${config.minecraft_version}:${config.jei_version}")
    
  //compile fg.deobf("slimeknights.mantle:Mantle:${config.minecraft_version}-${config.mantle_version}")
  //compile fg.deobf("slimeknights:TConstruct:${config.minecraft_version}-${config.tinkers_version}")
}

// replace properties in mods.toml with properties from config
processResources {
  inputs.property "version", config.mod_version
  inputs.property "minecraft_version", config.minecraft_version

  from(sourceSets.main.resources.srcDirs) {
    include 'META-INF/mods.toml'
    expand 'version': config.mod_version, 'minecraft_range': config.minecraft_range, 'forge_range': config.forge_range
  }

  from(sourceSets.main.resources.srcDirs) {
    exclude 'META-INF/mods.toml'
  }
}

jar {
  manifest {
    attributes([
      "Specification-Title": "Simple Absorption",
      "Specification-Vendor": "KnightMiner",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor": "KnightMiner",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

jar.finalizedBy('reobfJar')

// because the normal output has been made to be obfuscated
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}